package event

import (
	"github.com/16go/web-wasm/internal"
	"github.com/16go/web-wasm/pkg"
	"github.com/16go/web-wasm/pkg/z"
	"syscall/js"
)

type eventPropName string

const (
	Bubbles                eventPropName = "bubbles"
	Cancelable                           = "cancelable"
	Composed                             = "composed"
	CurrentTarget                        = "currentTarget"
	DefaultPrevented                     = "defaultPrevented"
	EventPhase                           = "eventPhase"
	ExplicitOriginalTarget               = "explicitOriginalTarget"
	IsTrusted                            = "isTrusted"
	Target                               = "target"
	TimeStamp                            = "timeStamp"
	Type                                 = "type"
)

type event struct {
	jsval js.Value
}

type Option func(*event) pkg.JsObjPropInterface

func NewEvent(name string, opts ...Option) event {
	evt := event{}
	optsObj := internal.NewJsObj()
	for _, opt := range opts {
		optsObj.AddProp(opt(&evt))
	}
	evt.jsval = js.Global().Get("Event").New(name, optsObj)
	return evt
}

func FromJsVal(e js.Value) z.EventInterface {
	evt := event{}
	evt.jsval = e
	return evt
}

func (e event) JsVal() js.Value {
	return e.jsval
}

// IsBubbles checks whether the event bubbles up through the DOM tree.
func (e event) IsBubbles() bool {
	return e.jsval.Get(string(Bubbles)).Bool()
}

// IsCancelable checks whether the event can be canceled.
func (e event) IsCancelable() bool {
	return e.jsval.Get(string(Cancelable)).Bool()
}

// IsComposed checks whether the event is composed or not.
func (e event) IsComposed() bool {
	return e.jsval.Get(string(Composed)).Bool()
}

// GetCurrentTarget gets the current target element of the event.
func (e event) GetCurrentTarget() js.Value {
	return e.jsval.Get(string(CurrentTarget))
}

// IsDefaultPrevented checks whether the default action of the event has been prevented or not.
func (e event) IsDefaultPrevented() bool {
	return e.jsval.Get(string(DefaultPrevented)).Bool()
}

// GetEventPhase gets the current event phase (capturing, at target, bubbling).
func (e event) GetEventPhase() int {
	return e.jsval.Get(string(EventPhase)).Int()
}

// GetExplicitOriginalTarget gets the explicit original target element of the event.
func (e event) GetExplicitOriginalTarget() js.Value {
	return e.jsval.Get(string(ExplicitOriginalTarget))
}

// IsTrusted checks whether the event is trusted (generated by the user agent) or not.
func (e event) IsTrusted() bool {
	return e.jsval.Get(string(IsTrusted)).Bool()
}

// GetTarget gets the target element of the event.
func (e event) GetTarget() js.Value {
	return e.jsval.Get(string(Target))
}

// GetTimeStamp gets the time stamp (in milliseconds) of when the event was created.
func (e event) GetTimeStamp() int {
	return e.jsval.Get(string(TimeStamp)).Int()
}

// GetType gets the type of the event.
func (e event) GetType() string {
	return e.jsval.Get(string(Type)).String()
}

// WithBubble sets whether the event will bubble up.
func WithBubble(v bool) Option {
	return func(e *event) pkg.JsObjPropInterface {
		return internal.NewJsObjProp(string(Bubbles), v)
	}
}

// WithCancelable sets whether the event can be cancelled.
func WithCancelable(v bool) Option {
	return func(e *event) pkg.JsObjPropInterface {
		return internal.NewJsObjProp(string(Cancelable), v)
	}
}

// WithComposed sets whether the event will trigger listeners outside of a shadow root.
func WithComposed(v bool) Option {
	return func(e *event) pkg.JsObjPropInterface {
		return internal.NewJsObjProp(string(Composed), v)
	}
}
